RHOCP 3.11 Demo scenario




사전준비


1. RHPDS 준비
   1. RHPDS Guide (https://www.opentlc.com/keys/rhpds.html)
   2. ssh -i ~/.ssh/ocp-workshop.pem ec2-user@bastion.seoul-7fae.openshiftworkshop.com
   3. 마스터 url: https://master.seoul-7fae.openshiftworkshop.com
   4. 접속 정보: opentlc-mgr/r3dh4t1!
      * $ oc login https://master.seoul-7fae.openshiftworkshop.com -u opentlc-mgr -p r3dh4t1!
   1. Openshift Starter Workshop 배포 (https://mojo.redhat.com/docs/DOC-1175872)
   2. Infra 계정 정보: adminuser / admin123
1. 어플리케이션 준비


1. Istio 배포 (https://docs.openshift.com/container-platform/3.11/servicemesh-install/servicemesh-install.html#product-overview)


시나리오
Starter Guide:http://starter-guides-infra.apps.seoul-7fae.openshiftworkshop.com/


1. 사용자 생성/프로젝트 생성 (Web Console에서 작업)
    -      콘솔 접속: https://master.seoul-7fae.openshiftworkshop.com
   * 로그인은 opentlc-mgr/r3dh4t1!
   *  CLI:    ssh -i ~/.ssh/ocp-workshop.pem ec2-user@bastion.seoul-7fae.openshiftworkshop.com
oc login https://master.seoul-7fae.openshiftworkshop.com -u opentlc-mgr -p r3dh4t1!

    - 포탈에서 Create Project에서 user1
      * Project 생성 : user1
      * oc new-project user1
      * Resources > Membership
      * Edit Membership
      * user1 / admin 권한
      * add
      * Done editing
      * logout
      * login (user1/openshift)
      * project 확인
      * 로그아웃 후 재로그인 (opentlc-mgr/r3dh4t1!)


      * 개인 터미널 창에서; 
      * oc project user1
      * 서비스 어카운트 설정;
      * oc policy add-role-to-user view -z default
2. 애플리케이션 배포 (Web Console에서 작업)
      * Image Deploy로 Front-End App 배포
      * Add to Project > Deploy Image
  

      * Image Name: docker.io/openshiftroadshow/parksmap:1.2.0
  

      * 아래와 같이 Label을 추가함:
      * app=workshop (the name we will be giving to the app)
      * component=parksmap (the name of this deployment)
      * role=frontend (the role this component plays in the overall application)







  

      * Deploy 버튼 누르고,  "Continue to the project overview." 누름.
      * "Applications → Pods" 들어가서 Pod 보여줌
  

      * Log 보여주기 (Event, Log, Terminal)
      *         *         * Terminal 들어가기
  

         * ls -l /parksmap.jar
         * Service 객체 보여줌 (Selector 등)
  

         * Front-End Route 서비스 생성 (Create Route)
  

         * 별다른 설정값 없이 Create
         * Route 버튼을 눌러 웹 화면 보여주기
  



3. S2I Build로 Back-End App 배포
         * Web Console 에서 Java 배포
  

         * Browse Catalog > Languages > openjdk
  

         * Next 버튼 눌러서 진행
         * Application Name: nationalparks
         * Git Repository: http://gogs-infra.apps.seoul-7fae.openshiftworkshop.com/user1/nationalparks.git[a]
  

         * advanced options in Build Configuration:
         * MAVEN_MIRROR_URL with value http://nexus.infra.svc.cluster.local:8081/repository/maven-all-public


         * Labels 설정
         * app=workshop (the name we will be giving to the app)
         * component=nationalparks (the name of this deployment)
         * role=backend (the role this component plays in the overall application)
         * Create 버튼 클릭
         * 빌드 로그 확인
  



      4. Add to Project > Browse Catalog > Databases > Mongo(Ephemeral)
  

         * Database Service Name:  mongodb-nationalparks


  

         * MONGODB_USER : mongodb
         * MONGODB_PASSWORD : mongodb
         * MONGODB_DATABASE: mongodb
         * MONGODB_ADMIN_PASSWORD : mongodb
         * Label 추가
         * CLI에서 
         * oc project user1
         * Next 후 Create a secret… 선택 후 Create
         * oc label dc/mongodb-nationalparks svc/mongodb-nationalparks app=workshop component=nationalparks role=database --overwrite
- Provisioned Services 의 MongoDB (Ephemeral)에서 View Secret 클릭
  



         * Reveal Secret 버튼 클릭 해서 보고, Add to Application 버튼 클릭




  



         * Select nationalparks application and click Save.
  

         * 새로 배포됨을 기다림
         * oc label route nationalparks type=parksmap-backend
         * 백앤드 서비스에 API를 호출하여 DB 데이터를 Load하도록 함
curl http://nationalparks-user1.apps.seoul-7fae.openshiftworkshop.com/ws/data/load
*조회하기
http://nationalparks-user1.apps.seoul-7fae.openshiftworkshop.com/ws/data/all
Frontend application 재접속 하여 확인
         *   

5. Jenkins Pipeline 셋업
            * nationalparks application의 deployments를 manual로 전환함
            * Applications → Deployments, nationalparks 선택, Actions → Edit 버튼 클릭
  

            * Config change trigger 체크박스를 해제
  

            * Jenkins Pipeline 셋업
            * Search Catalog에서 jenkins 검색


  

            * Next 클릭
            * Jenkins 설정에서 Memory Limit을 3Gi로 설정
  

            * Do not bind at this time 선택 후 Create  


               * Git 접속
               * gogs login: adminuser/admin123
http://gogs-infra.apps.seoul-7fae.openshiftworkshop.com/user1/nationalparks
               * gogs login: adminuser/admin123
               * New File 선택 후 Jenkinsfile.workshop 파일 생성
pipeline {
  agent {
      label 'maven'
  }
  stages {
    stage('Build JAR') {
      steps {
        git url: 'http://gogs-infra.apps.seoul-7fae.openshiftworkshop.com/user1/nationalparks'
        sh "cp .settings.xml ~/.m2/settings.xml"
        sh "mvn package"
      }
    }
    stage('Archive JAR') {
      steps {
        sh "mvn deploy -DskipTests"
      }
    }
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshift.startBuild("nationalparks",
                                   "--from-file=target/nationalparks.jar",
                                   "--wait")
            }
          }
        }
      }
    }
    stage('Deploy') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def result, dc = openshift.selector("dc", "nationalparks")
              dc.rollout().latest()
              timeout(10) {
                  result = dc.rollout().status("-w")
              }
              if (result.status != 0) {
                  error(result.err)
              }
            }
          }
        }
      }
    }
  }
}


	

               * Build JAR: will clone our source repository for nationalparks and will use maven’s package goal to create a .jar file.
               * Archive JAR: will upload our .jar file to nexus repository, to have it under control.
               * Build Image: will build an image using a binary file as input in OpenShift. The build will use the .jar file that was created.
               * Deploy: it will deploy the created image on OpenShift using the DeploymentConfig named nationalparks we created in the previous lab.
               * Commit Changes 버튼 클릭
               * Add to Project > import YAML/JSON 후 아래와 같은 BuildConfig 오브젝트를 생성
               * input box에 복붙 후 create


apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: nationalparks-build
spec:
  runPolicy: Serial
  source:
    git:
      ref: master
      uri: "http://gogs-infra.apps.seoul-7fae.openshiftworkshop.com/user1/nationalparks"
    type: Git
  strategy:
    jenkinsPipelineStrategy:
      env:
        - name: NEXUS_URL
          value: "http://nexus.infra.svc:8081"
      jenkinsfilePath: Jenkinsfile.workshop
    type: JenkinsPipeline
  triggers:
    - github:
        secret: CqPGlXcKJXXqKxW4Ye6z
      type: GitHub
    - generic:
        secret: 4LXwMdx9vhQY4WXbLcFR
      type: Generic
    - type: ConfigChange
- Pipeline 빌드 확인
  

- log를 보기 위해 view Logs 버튼 클릭
- openshift credentials로 로그인
- user1/openshift
  

               * allowed selected permissions
  

               * Jenkins 로그 확인
  

               * 다시 Pipelines 확인
  

6. Git Trigger로 Rolling Deployment
               * nationalparks Pod 갯수 세개로 증가
               * api 호출해서 변경 전 스트링 값 보여줌
               * http://nationalparks-user1.apps.seoul-7fae.openshiftworkshop.com/ws/info/
               * Pipelines > nationalparks-build > Configuration
               * Triggers > Generic Webhook URL을 복사
               * gogs 접속
               * http://gogs-infra.apps.seoul-7fae.openshiftworkshop.com/user1/nationalparks
               * gogs 열어서 설정 > Webhooks > 추가(Git) > gogs > 페이로드 URL에 URL 입력
               *                  * Add Webhook 버튼 클릭
               *                  * paste url 된걸 payload url에 복사
               * Content Type 은 application/x-www-form-urlencoded.
               *                  * gogs repo에서 아래 경로의 파일 수정
src/main/java/com/openshift/evg/roadshow/parks/rest/BackendController.java
  

                  * Line number 20 수정
                  * return new Backend("nationalparks","National Parks", new Coordinates("47.039304", "14.505178"), 4);
                  * 를 아래와 같이 수정
                  * return new Backend("nationalparks","Amazing National Parks", new Coordinates("47.039304", "14.505178"), 4);
                  * Commit Changes 클릭
                  * Pipeline 재시작 확인
  

                  * 변경되었는지 URL 날림
http://nationalparks-user1.apps.seoul-7fae.openshiftworkshop.com/ws/info/
7. Auto Healing & Auto Scaling
                  * Pod를 3개로 증가시킴 (parksmap)
                  * Auto(Self) Healing 
                  * OpenShift Console 의 개수 확인
                  * 옆에 보이는 터미널에서 명령
                  * oc project user1
                  * oc delete pod -??
                  * Auto Scaling
                  * e.g. : oc autoscale dc/parksmap --min 1 --max 5 --cpu-percent=40
                  * Web console 에서 설정
                  * 해당 Application Deployment 설정
                  * parksmap 선택
                  * Action > Add Autoscaler
                  * Min : 1 Max : 5 CPU Target : 40%
                  * Resource > Quota에서 설정된 CPU 값 설명
                  * Siege로 부하 줘서 Auto Scaling
                  * oc run web-load --restart='OnFailure' --image=siamaksade/siege -- -c100 -d2 -t5M  http://parksmap-user1.apps.seoul-7fae.openshiftworkshop.com/
                  * oc get hpa -w


---------------------------------------------------------------------------------------------------------------------------------------------------
8. Istio
                  * export PATH="$PATH:/root/istio-1.0.6/bin"
                  * 미리 Bookinfo App 을 배포해 둠
                  * http://istio-ingressgateway-istio-system.apps.seoul-7fae.openshiftworkshop.com/productpage
                  *                   * Kiali / Jaeger Introduction
                  * https://kiali-istio-system.apps.seoul-7fae.openshiftworkshop.com/console/overview?duration=60&pi=15000
                  * https://jaeger-query-istio-system.apps.seoul-7fae.openshiftworkshop.com
구성 방안
                  * Destination Rule
                  * 초기화
                  * oc apply -f https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/networking/destination-rule-all.yaml
                  * oc delete -f https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/networking/virtual-service-all-v1.yaml
                여기서부터 시작
                  * 기본 라우팅 Rule은 Round Robin 화면으로 보여주기
                  * v1으로 트래픽 전환
                  * oc project myproject
                  * oc apply -f https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/networking/virtual-service-all-v1.yaml
                  * oc get virtualservice reviews -o yaml
                  * 특정 유저가 들어오면 특정한 버전으로 라우팅
                  * oc apply -f https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml
                  * oc get virtualservice reviews -o yaml
                  * 화면으로 보여주기 jason으로 접속하면 v2, 나머지는 v1
                  * oc get virtualservice ratings -o yaml


                  * Traffic Shifting
                  * oc project httpbin
                  * oc apply -f https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/networking/virtual-service-all-v1.yaml
                  * 50대 50으로 보내기
                  * oc apply -f https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml
                  * oc get virtualservice reviews -o yaml
                  * kiali dashboard에서 트래픽 확인
                  * v3로 보내기
                  * oc apply -f https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/networking/virtual-service-reviews-v3.yaml
                  * 실제 화면에서 확인
                  * kiali에서 보여주기




                  * Circuit breaker
                  * https://istio.io/docs/tasks/traffic-management/circuit-breaking/
                  * oc project httpbin
                  * oc adm policy add-scc-to-user anyuid -z default -n httpbin
                  * oc adm policy add-scc-to-user privileged -z default -n httpbin
                  * kubectl apply -f <(istioctl kube-inject -f httpbin.yaml)
                  * cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
 name: httpbin
spec:
 host: httpbin
 trafficPolicy:
   connectionPool:
     tcp:
       maxConnections: 1
     http:
       http1MaxPendingRequests: 1
       maxRequestsPerConnection: 1
   outlierDetection:
     consecutiveErrors: 1
     interval: 1s
     baseEjectionTime: 3m
     maxEjectionPercent: 100
EOF
                  * 설명
                     * outlierDetection: 이상 치 검출 룰
                     * consecutiveErrors: 허용하는 동시 에러 수
                     * interval: 에러 검출 주기 = consecutiveErrors가 해당 interval 내에 발생하면 발동됨
                     * baseEjectionTime: 발동된 Circuit Breaker 해소에 걸리는 시간


                     * kubectl apply -f <(istioctl kube-inject -f fortio-deploy.yaml)
                     * 시연 시작
                     * oc get destinationrule httpbin -o yaml
                     * FORTIO_POD=$(kubectl get pod | grep fortio | awk '{ print $1 }')
                     * oc exec -it $FORTIO_POD  -c fortio /usr/local/bin/fortio -- load -curl  http://httpbin:8000/get
                     * oc exec -it $FORTIO_POD  -c fortio /usr/local/bin/fortio -- load -c 2 -qps 0 -n 20 -loglevel Warning http://httpbin:8000/get
                     * oc exec -it $FORTIO_POD  -c fortio /usr/local/bin/fortio -- load -c 4 -qps 0 -n 20 -loglevel Warning http://httpbin:8000/get
                     * oc exec -it $FORTIO_POD  -c fortio /usr/local/bin/fortio -- load -c 10 -qps 0 -n 20 -loglevel Warning http://httpbin:8000/get




                     * Kiali Dashboard에서 보여주기
                     * oc exec -it $FORTIO_POD  -c istio-proxy  -- sh -c 'curl localhost:15000/stats' | grep httpbin | grep pending (결과값 보여주기)
                     * 



9. Fail-over
                     * oc project nh-apps
                     * oc get pod -o wide 
                     * ssh <node url>
                     * sudo -i
                     * systemctl stop atomic-openshift-node
                     * exit exit
                     * oc get pod -o wide -n nh-project -w












참고자료:
Default Destination rule:


https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/networking/destination-rule-all-mtls.yaml










[a]ㅎㅎ URL 오타